{"version":3,"sources":["components/CategoryAdd.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","value","type","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAQd,4BAAKD,GACL,2BACIQ,MAAQR,EACRS,KAAK,OACLC,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOH,YCNlBI,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAClC,OACI,yBAAKC,UAAU,8CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,0FAC6EO,UAAUF,GADvF,sBAEIG,MAAMR,GAFV,cAEbS,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAACc,EAAIC,cAAL,aAAC,EAAYC,iBAAiBhB,QARtB,kBAWZY,GAXY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAY,MAEXrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAsBrC,OAdAC,qBAAW,WACPjB,EAAQC,GACHiB,MAAK,SAAAC,GACEH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAI1B,CAACb,IAKGc,EDhBwBK,CAAanB,GAA/BU,EALsB,EAK5BJ,KAAaO,EALe,EAKfA,QAGpB,OACI,oCACI,4BAAKb,GACAa,GAAW,uBAAGjB,UAAW,oCAAd,YACZ,yBAAKA,UAAU,aAEHc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIW,IAAKX,EAAIhB,IACLgB,UEjB3BY,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAQ9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQ4C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACIoB,IAAMpB,EACNA,SAAUA,UCjBtCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.574269d3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ({ setCategories }) => {\n    \n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        \n        if (inputValue.trim().length > 2){\n            setCategories( cats => [inputValue,...cats])\n            setInputValue('')\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h1>{inputValue}</h1>\n            <input \n                value= {inputValue}\n                type='text'\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default CategoryAdd","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className='card animate__animated animate__backInLeft'>\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=UcDE6rza0884MECAHTKdZ8j0WIL3buG5&q=${ encodeURI(category) }&limit=10`\n    const response = await fetch(url);\n    const { data } = await response.json()\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport {useFetchGifs} from '../hooks/useFetchGifs'\n\nexport const GifGrid = ({category}) => {\n\n    //const [images, setImages] = useState([])\n\n    //Cada que canbie algo de categoria se vuelve a renderizar\n    const {data: images,loading} = useFetchGifs(category)    \n    \n    \n    return (\n        <>\n            <h3>{category}</h3>\n                {loading && <p className= 'animate__animated animate__flash'> Loading</p>}\n                <div className='card-grid'>\n                        {\n                            images.map( img => (\n                                <GifGridItem\n                                    key={img.id}\n                                    {...img}\n                                />\n\n                            ))    \n                        }\n                </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) =>{\n    //al inicio va a estar cargando\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    //useEffect solo se va a disparar cuando cambie la categoria\n    useEffect( () =>{\n        getGifs(category)\n            .then(imgs => {\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    })\n                \n            })\n    }, [category]) //si la categoria cambia se vuelve a ejecutar useEffect*/\n    //si el arreglo es vacio solo ejecuta una vez\n\n\n\n    return state //{data: [], loading: true}\n}","import React ,{useState}from 'react'\nimport { CategoryAdd } from './components/CategoryAdd'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Spongebob'])\n\n    /*const handleAdd = () => {\n        setCategories(['Hola',...categories])\n    }*/\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <CategoryAdd setCategories = {setCategories}/>\n            <hr></hr>\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key=Â {category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n//GifExpertApp\n"],"sourceRoot":""}